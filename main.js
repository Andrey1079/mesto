(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var r=function(){function t(e,r,n,o,i,u){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._galleryItemTemplate=document.querySelector(r).content.cloneNode(!0),this._galeryImage=this._galleryItemTemplate.querySelector(".gallery__image"),this._galeryCaption=this._galleryItemTemplate.querySelector(".gallery__city"),this._gallerylikeButton=this._galleryItemTemplate.querySelector(".gallery__like-button"),this._galleryTrashButton=this._galleryItemTemplate.querySelector(".gallery__bin-button"),this._galleryItem=this._galleryItemTemplate.querySelector(".gallery__item"),this._like_counter=this._galleryItemTemplate.querySelector(".gallery__like-counter"),this._likesArray=e.likes,this._likesQuantity=e.likes.length,this._cardId=e._id,this._caption=e.name,this._url=e.link,this._cardOwner=e.owner.name,this.openPopupFunc=n,this.clickBinButton=o,this._likesToggleFunc=i,this._userName=u()}var r,n;return r=t,(n=[{key:"setCard",value:function(){return this._checkOwnerCard(),this.setLikes(this._likesArray),this._setEventLIsteners(),this._galeryImage.src=this._url,this._galeryImage.alt=this._caption,this._galeryCaption.textContent=this._caption,this._galleryItemTemplate}},{key:"_setEventLIsteners",value:function(){var t=this;this._gallerylikeButton.addEventListener("click",(function(e){t._likesArray.some((function(e){return e.name===t._userName}))?t._likesToggleFunc(t._cardId,"DELETE"):t._likesToggleFunc(t._cardId,"PUT")})),this._galleryTrashButton.addEventListener("click",(function(e){t.clickBinButton(t,t._cardId)})),this._galeryImage.addEventListener("click",(function(e){t.openPopupFunc(t._galeryImage.src,t._galeryImage.alt)}))}},{key:"remove",value:function(){this._galleryItem.remove(),this._galleryItem=null}},{key:"_checkOwnerCard",value:function(){this._cardOwner!==this._userName&&this._galleryTrashButton.classList.add("gallery__bin-button_invisible")}},{key:"setLikes",value:function(t){var e=this;t.some((function(t){return t.name===e._userName}))?this._gallerylikeButton.classList.add("gallery__like-button_active"):this._gallerylikeButton.classList.remove("gallery__like-button_active"),this._like_counter.textContent=t.length,this._likesArray=t}}])&&e(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}();function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._formElement=r,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._errorClass=e.errorClass,this._inputErrorClass=e.inputErrorClass,this._inputs=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._errorMessages=Array.from(this._formElement.querySelectorAll(this._inputErrorClass))}var e,r;return e=t,(r=[{key:"enableValidation",value:function(){this._setEventListener()}},{key:"_setEventListener",value:function(){var t=this;this._toggleButtonState(),this._inputs.forEach((function(e){t._checkInputValidity(e),addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"_checkInputValidity",value:function(t){var e=this._formElement.querySelector(".".concat(t.id,"-error"));t.validity.valid?this._hideInputError(e):this._showInputError(e,t.validationMessage)}},{key:"_showInputError",value:function(t,e){t.textContent=e,t.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){t.classList.remove(this._errorClass),t.textContent=""}},{key:"_disableSubmitButton",value:function(t,e){t.classList.add(e),t.setAttribute("disabled","disabled")}},{key:"_enableSubmitButton",value:function(t,e){t.classList.remove(e),t.removeAttribute("disabled","disabled")}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput(this._inputs)?this._disableSubmitButton(this._submitButton,this._inactiveButtonClass):this._enableSubmitButton(this._submitButton,this._inactiveButtonClass)}},{key:"_hasInvalidInput",value:function(){return this._inputs.some((function(t){return!t.validity.valid}))}},{key:"resetInputsErrors",value:function(){var t=this;this._toggleButtonState(),this._errorMessages.forEach((function(e){t._hideInputError(e)}))}}])&&o(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==u(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===u(o)?o:String(o)),n)}var o}var a=function(){function t(e,r){var n=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=n,this._container=document.querySelector(r)}var e,r;return e=t,(r=[{key:"addItem",value:function(t){this._container.prepend(t)}},{key:"renderItemsFromArray",value:function(t){var e=this;t.forEach((function(t){e.addItem(e._renderer(t))}))}}])&&s(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,p(n.key),n)}}function f(t,e,r){return(e=p(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function p(t){var e=function(t,e){if("object"!==c(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===c(e)?e:String(e)}var y=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),f(this,"_handleEscClose",(function(t){"Escape"===t.key&&r.close()})),f(this,"_closePopupByClickOverlay",(function(t){t.target===t.currentTarget&&r.close()})),this._popup=document.querySelector(e),this._popupCloseButton=this._popup.querySelector(".popup__close-button ")}var e,r;return e=t,(r=[{key:"open",value:function(){this._popup.classList.add("popup_visible"),this._popup.addEventListener("mousedown",this._closePopupByClickOverlay),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_visible"),this._popup.removeEventListener("mousedown",this._closePopupByClickOverlay),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popupCloseButton.addEventListener("click",this.close.bind(this))}}])&&l(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function b(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==h(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==h(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===h(o)?o:String(o)),n)}var o}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},m.apply(this,arguments)}function v(t,e){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},v(t,e)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var d=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&v(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(n);if(o){var r=_(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===h(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._image=e._popup.querySelector(".popup__img"),e._caption=e._popup.querySelector(".popup__place-name-of-big-photo"),e}return e=u,(r=[{key:"open",value:function(t){this._image.src=t.src,this._image.alt=t.alt,this._caption.textContent=t.alt,m(_(u.prototype),"open",this).call(this)}}])&&b(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(y);function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function S(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==g(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===g(o)?o:String(o)),n)}var o}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=O(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},w.apply(this,arguments)}function k(t,e){return k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},k(t,e)}function O(t){return O=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},O(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&k(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=O(n);if(o){var r=O(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===g(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,e))._submitFunc=t,r._form=r._popup.querySelector(".popup__form"),r._inputs=r._form.querySelectorAll(".popup__form-item"),r}return e=u,(r=[{key:"_getInputValues",value:function(){var t=this;return this._formValues={},this._inputs=Array.from(this._inputs),this._inputs.forEach((function(e){return t._formValues[e.name]=e.value})),this._formValues}},{key:"setInputValues",value:function(t){this._inputs.forEach((function(e){e.value=t[e.name]}))}},{key:"setEventListeners",value:function(){var t=this;w(O(u.prototype),"setEventListeners",this).call(this),this._submitCallback=function(e){e.preventDefault(),t._submitFunc(t._getInputValues.bind(t)())},this._form.addEventListener("submit",this._submitCallback)}},{key:"close",value:function(){this._form.reset(),w(O(u.prototype),"close",this).call(this)}}])&&S(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(y);function E(t){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},E(t)}function P(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==E(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==E(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===E(o)?o:String(o)),n)}var o}var I=function(){function t(e){var r=e.userDataSelectors;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userNameField=document.querySelector(r.userNameSelector),this._userProfessionField=document.querySelector(r.userProfessionSelector),this._userAvatar=document.querySelector(r.userAvatarSelector)}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return this._userDataForInputs={},this._userDataForInputs.name=this._userNameField.textContent,this._userDataForInputs.profession=this._userProfessionField.textContent,this._userDataForInputs}},{key:"setUserInfo",value:function(t){this._userNameField.textContent=t.name,this._userProfessionField.textContent=t.about}},{key:"setAvatar",value:function(t){this._userAvatar.style.backgroundImage="url(".concat(t.avatar,")")}}])&&P(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==C(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===C(o)?o:String(o)),n)}var o}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=q(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},B.apply(this,arguments)}function L(t,e){return L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},L(t,e)}function q(t){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},q(t)}var R=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&L(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=q(n);if(o){var r=q(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._submitFunc="",r._submitButton=r._popup.querySelector(".popup__submit-button"),r}return e=u,(r=[{key:"setSubmit",value:function(t){this._submitFunc=t}},{key:"setEventListeners",value:function(){var t=this;this._submitButton.addEventListener("click",(function(e){e.preventDefault(),t._submitFunc()})),B(q(u.prototype),"setEventListeners",this).call(this)}}])&&T(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(y);function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function F(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==A(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==A(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===A(o)?o:String(o)),n)}var o}var U=function(){function t(e,r){var n=r.showErrFunc;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._showErrorMessasge=n,this._baseUrl=e.baseUrl,this._settingsObj={},this._settingsObj.method="GET",this._settingsObj.headers=e.headers}var e,r;return e=t,(r=[{key:"getStartInfo",value:function(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}},{key:"getUserInfo",value:function(){var t=this;return fetch("".concat(this._baseUrl,"/users/me"),this._settingsObj).then((function(e){return t._checkResponse(e)}))}},{key:"getInitialCards",value:function(){var t=this;return fetch("".concat(this._baseUrl,"/cards"),this._settingsObj).then((function(e){return t._checkResponse(e)}))}},{key:"setUserInfo",value:function(t){var e=this;return this._settingsObj.method="PATCH",this._settingsObj.body=JSON.stringify({name:t.name,about:t.profession}),fetch("".concat(this._baseUrl,"/users/me"),this._settingsObj).then((function(t){return e._checkResponse(t)}))}},{key:"postNewCard",value:function(t){var e=this;return this._settingsObj.method="POST",this._settingsObj.body=JSON.stringify({name:t.name,link:t.link}),fetch("".concat(this._baseUrl,"/cards"),this._settingsObj).then((function(t){return e._checkResponse(t)}))}},{key:"deleteCard",value:function(t){var e=this;return this._settingsObj.method="DELETE",fetch("".concat(this._baseUrl,"/cards/").concat(t),this._settingsObj).then((function(t){return e._checkResponse(t)}))}},{key:"likesToggle",value:function(t,e){var r=this;return this._settingsObj.method=e,fetch("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),this._settingsObj).then((function(t){return r._checkResponse(t)}))}},{key:"patchAvatar",value:function(t){var e=this;return this._settingsObj.method="PATCH",this._settingsObj.body=JSON.stringify({avatar:t.url}),fetch("".concat(this._baseUrl,"/users/me/avatar"),this._settingsObj).then((function(t){return e._checkResponse(t)}))}},{key:"_checkResponse",value:function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}}])&&F(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),x={formSelector:".popup__form",inputSelector:".popup__form-item",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",errorClass:"popup__form-item-error_visible",inputErrorClass:".popup__form-item-error"},D=document.querySelector(".popup-edit-profile"),N=document.querySelector(".profile__edit-profile-button"),V=D.querySelector(".popup__form_type_edit-profile"),M={userNameSelector:".profile__user-name",userProfessionSelector:".profile__user-profession",userAvatarSelector:".profile__avatar-edit-button"},J=document.querySelector(M.userNameSelector),H=document.querySelector(".popup-add-photo"),z=document.querySelector(".profile__add-photo-button"),G=H.querySelector(".popup__form_type_add-photo"),Q=document.querySelector(".popup-edit-avatar"),$=document.querySelector(".profile__avatar-edit-button"),K=Q.querySelector(".popup__form_type_edit-avatar"),W=document.querySelector(".popup__error-message"),X=Q.querySelector(".popup__submit-button"),Y=H.querySelector(".popup__submit-button"),Z=D.querySelector(".popup__submit-button"),tt=document.querySelector(".popup-confirm").querySelector(".popup__submit-button");function et(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function rt(t){W.textContent=t,bt.open()}function nt(t,e,r){t?(console.log("sadfa"),e.value=r):e.value=r}function ot(){return J.textContent}function it(t,e){var r=this;vt.likesToggle(t,e).then((function(t){r.setLikes(t.likes)})).catch((function(t){return rt(t)}))}function ut(t,e){ht.open(),ht.setSubmit((function(){nt(!0,tt,"Удаление..."),vt.deleteCard(e).then((function(){t.remove()})).catch((function(t){return rt(t)})).finally((function(){nt(!1,tt,"Удалить"),ht.close()}))}))}function st(t,e){var r={};r.src=t,r.alt=e,yt.open(r)}function at(t){return new r(t,".gallery-item-template",st,ut,it,ot).setCard(J)}var ct=new a({renderer:at},".gallery__list"),lt=new j((function(t){nt(!0,Y,"Сохранение..."),vt.postNewCard(t).then((function(t){ct.addItem(at(t))})).catch((function(t){return rt(t)})).finally((function(){nt(!1,Y,"Создать"),lt.close()}))}),".popup-add-photo");lt.setEventListeners();var ft=new j((function(t){nt(!0,Z,"Сохранение..."),vt.setUserInfo(t).then((function(t){mt.setUserInfo(t)})).catch((function(t){return rt(t)})).finally((function(){nt(!1,Z,"Сохранить"),ft.close()}))}),".popup-edit-profile");ft.setEventListeners();var pt=new j((function(t){nt(!0,X,"Сохранение..."),vt.patchAvatar(t).then((function(t){mt.setAvatar(t)})).catch((function(t){return rt(t)})).finally((function(){nt(!1,X,"Сохранить"),pt.close()}))}),".popup-edit-avatar");pt.setEventListeners();var yt=new d(".popup-big-photo");yt.setEventListeners();var ht=new R(".popup-confirm",(function(t){var e=this;vt.deleteCard(t).then((function(){e.close()}))}));ht.setEventListeners();var bt=new y(".popup-error");bt.setEventListeners();var mt=new I({userDataSelectors:M}),vt=new U({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-66",headers:{authorization:"02d169df-2e89-48d4-b456-d324fa7fca22","Content-Type":"application/json"}},{showErrFunc:function(t){W.textContent=t,bt.open()}}),_t=new i(x,G),dt=new i(x,V),gt=new i(x,K);_t.enableValidation(),dt.enableValidation(),gt.enableValidation(),z.addEventListener("click",(function(t){_t.resetInputsErrors(),lt.open()})),N.addEventListener("click",(function(){dt.resetInputsErrors(),ft.setInputValues(mt.getUserInfo()),ft.open()})),$.addEventListener("click",(function(){gt.resetInputsErrors(),pt.open()})),vt.getStartInfo().then((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,u,s=[],a=!0,c=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;a=!1}else for(;!(a=(n=i.call(r)).done)&&(s.push(n.value),s.length!==e);a=!0);}catch(t){c=!0,o=t}finally{try{if(!a&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(c)throw o}}return s}}(e,r)||function(t,e){if(t){if("string"==typeof t)return et(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?et(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];mt.setUserInfo(o),mt.setAvatar(o),ct.renderItemsFromArray(i.reverse())})).catch((function(t){return rt(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,